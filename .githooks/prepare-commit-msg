#!/usr/bin/env python3
import re
import sys
from subprocess import check_output


def strip_comments(code):
    code = str(code)
    return re.sub(r'(?m)^ *#.*\n?', '', code)


def clean_string(string, issue):
    string = string.replace(issue, '')
    string = string.strip()
    return strip_comments(string)


def prefix_commit_msg_with_issue():
    issue_prefix = branch.index('OSIS')
    issue = branch[issue_prefix:]
    print("Issue : " + issue)
    with open(commit_msg_filepath, 'r+') as fh:
        commit_msg = fh.read()
        if not clean_string(commit_msg, issue):
            print('ERROR :: Commit message is empty !')
            sys.exit(1)
        fh.seek(0, 0)
        fh.write('%s %s' % (issue, commit_msg))


commit_msg_filepath = sys.argv[1]

branch = check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip()
branch = branch.decode("utf-8")

branches_to_exclude = ['dev', 'test', 'qa', 'master']

if branch not in branches_to_exclude:
    try:
        prefix_commit_msg_with_issue()
    except ValueError:
        print('WARNING :: commit msg not prefixed with branch name')
else:
    print('Incorrect branch name' + branch)
    sys.exit(1)

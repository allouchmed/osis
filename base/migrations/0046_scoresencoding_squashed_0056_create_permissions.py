# Generated by Django 2.2.5 on 2019-12-14 00:45

from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('base', '0046_scoresencoding'), ('base', '0047_auto_20160516_2107'), ('base', '0048_person_birth_date'), ('base', '0049_auto_20160523_1031'), ('base', '0050_sessionexam_deadline'), ('base', '0051_scoresencoding'), ('base', '0052_auto_20160527_1510'), ('base', '0053_auto_20160529_2355'), ('base', '0054_scoresencoding'), ('base', '0055_message_history_modifications'), ('base', '0056_create_permissions')]

    dependencies = [
        ('base', '0045_update_justification_values'),
        ('reference', '0002_auto_20160414_1720'),
    ]

    operations = [
        migrations.RunSQL(
            sql='\n            DROP VIEW IF EXISTS app_scores_encoding;\n\n            CREATE OR REPLACE VIEW app_scores_encoding AS\n            SELECT row_number() OVER () as id,\n\n                base_programmanager.id as program_manager_id,\n                program_manager_person.id as pgm_manager_person_id,\n                base_offeryear.id as offer_year_id,\n                base_learningunityear.id as learning_unit_year_id,\n\n                count(base_examenrollment.id) as total_exam_enrollments,\n                sum(case when base_examenrollment.score_final is not null or base_examenrollment.justification_final is not null then 1 else 0 end) exam_enrollments_encoded\n\n\n            from base_examenrollment\n            join base_sessionexam on base_sessionexam.id = base_examenrollment.session_exam_id\n            join base_learningunityear on base_learningunityear.id = base_sessionexam.learning_unit_year_id\n\n            join base_offeryearcalendar on base_offeryearcalendar.id = base_sessionexam.offer_year_calendar_id\n            join base_offeryear on base_offeryear.id = base_offeryearcalendar.offer_year_id\n            join base_programmanager on base_programmanager.offer_year_id = base_offeryear.id\n            join base_person program_manager_person on program_manager_person.id = base_programmanager.person_id\n\n            where base_offeryearcalendar.start_date < CURRENT_TIMESTAMP\n            and base_offeryearcalendar.end_date >  CURRENT_TIMESTAMP\n\n            group by\n            base_programmanager.id,\n            program_manager_person.id,\n            base_offeryear.id,\n            base_learningunityear.id\n            ;\n            ',
        ),
        migrations.RemoveField(
            model_name='offeryear',
            name='structure',
        ),
        migrations.AddField(
            model_name='offeryear',
            name='city',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.deletion.CASCADE, to='reference.Country'),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='entity_administration',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.deletion.CASCADE, related_name='admministration', to='base.Structure'),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='entity_administration_fac',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.deletion.CASCADE, related_name='admministration_fac', to='base.Structure'),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='entity_management',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.deletion.CASCADE, related_name='management', to='base.Structure'),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='entity_management_fac',
            field=models.ForeignKey(blank=True, null=True, on_delete=models.deletion.CASCADE, related_name='management_fac', to='base.Structure'),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='fax',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='location',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='phone',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='postal_code',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='offeryear',
            name='recipient',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='person',
            name='birth_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='programmanager',
            unique_together={('person', 'offer_year')},
        ),
        migrations.AddField(
            model_name='sessionexam',
            name='deadline',
            field=models.DateField(null=True),
        ),
        migrations.RunSQL(
            sql='\n            DROP VIEW IF EXISTS app_scores_encoding;\n\n            CREATE OR REPLACE VIEW app_scores_encoding AS\n            SELECT row_number() OVER () as id,\n\n                base_programmanager.id as program_manager_id,\n                program_manager_person.id as pgm_manager_person_id,\n                base_offeryear.id as offer_year_id,\n                base_learningunityear.id as learning_unit_year_id,\n\n                count(base_examenrollment.id) as total_exam_enrollments,\n                sum(case when base_examenrollment.score_final is not null or base_examenrollment.justification_final is not null then 1 else 0 end) exam_enrollments_encoded\n\n\n            from base_examenrollment\n            join base_sessionexam on base_sessionexam.id = base_examenrollment.session_exam_id\n            join base_learningunityear on base_learningunityear.id = base_sessionexam.learning_unit_year_id\n\n            join base_offeryearcalendar on base_offeryearcalendar.id = base_sessionexam.offer_year_calendar_id\n\n            join base_learningunitenrollment on base_learningunitenrollment.id = base_examenrollment.learning_unit_enrollment_id\n            join base_offerenrollment on base_offerenrollment.id = base_learningunitenrollment.offer_enrollment_id\n            join base_offeryear on base_offeryear.id = base_offerenrollment.offer_year_id\n\n            join base_programmanager on base_programmanager.offer_year_id = base_offeryear.id\n            join base_person program_manager_person on program_manager_person.id = base_programmanager.person_id\n\n            where base_offeryearcalendar.start_date < CURRENT_TIMESTAMP\n            and base_offeryearcalendar.end_date >  CURRENT_TIMESTAMP\n\n            group by\n            base_programmanager.id,\n            program_manager_person.id,\n            base_offeryear.id,\n            base_learningunityear.id\n            ;\n            ',
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_draft',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'ABSENCE_UNJUSTIFIED'), ('ABSENCE_JUSTIFIED', 'ABSENCE_JUSTIFIED'), ('CHEATING', 'CHEATING'), ('SCORE_MISSING', 'SCORE_MISSING')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_final',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'ABSENCE_UNJUSTIFIED'), ('ABSENCE_JUSTIFIED', 'ABSENCE_JUSTIFIED'), ('CHEATING', 'CHEATING'), ('SCORE_MISSING', 'SCORE_MISSING')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_reencoded',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'ABSENCE_UNJUSTIFIED'), ('ABSENCE_JUSTIFIED', 'ABSENCE_JUSTIFIED'), ('CHEATING', 'CHEATING'), ('SCORE_MISSING', 'SCORE_MISSING')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollmenthistory',
            name='justification_final',
            field=models.CharField(choices=[('ABSENCE_UNJUSTIFIED', 'ABSENCE_UNJUSTIFIED'), ('ABSENCE_JUSTIFIED', 'ABSENCE_JUSTIFIED'), ('CHEATING', 'CHEATING'), ('SCORE_MISSING', 'SCORE_MISSING')], max_length=20, null=True),
        ),
        migrations.RemoveField(
            model_name='sessionexam',
            name='status',
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_draft',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'Absence injustifiée'), ('ABSENCE_JUSTIFIED', 'Absence justifiée'), ('CHEATING', 'Tricherie'), ('SCORE_MISSING', 'Note manquante')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_final',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'Absence injustifiée'), ('ABSENCE_JUSTIFIED', 'Absence justifiée'), ('CHEATING', 'Tricherie'), ('SCORE_MISSING', 'Note manquante')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_reencoded',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'Absence injustifiée'), ('ABSENCE_JUSTIFIED', 'Absence justifiée'), ('CHEATING', 'Tricherie'), ('SCORE_MISSING', 'Note manquante')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollmenthistory',
            name='justification_final',
            field=models.CharField(choices=[('ABSENCE_UNJUSTIFIED', 'Absence injustifiée'), ('ABSENCE_JUSTIFIED', 'Absence justifiée'), ('CHEATING', 'Tricherie'), ('SCORE_MISSING', 'Note manquante')], max_length=20, null=True),
        ),
        migrations.RunSQL(
            sql='\n            DROP VIEW IF EXISTS app_scores_encoding;\n\n            CREATE OR REPLACE VIEW app_scores_encoding AS\n            SELECT row_number() OVER () as id,\n\n                base_programmanager.id as program_manager_id,\n                program_manager_person.id as pgm_manager_person_id,\n                base_offeryear.id as offer_year_id,\n                base_learningunityear.id as learning_unit_year_id,\n\n                count(base_examenrollment.id) as total_exam_enrollments,\n                sum(case when base_examenrollment.score_final is not null or base_examenrollment.justification_final is not null then 1 else 0 end) exam_enrollments_encoded\n\n\n            from base_examenrollment\n            join base_sessionexam on base_sessionexam.id = base_examenrollment.session_exam_id\n            join base_learningunityear on base_learningunityear.id = base_sessionexam.learning_unit_year_id\n\n            join base_offeryearcalendar on base_offeryearcalendar.id = base_sessionexam.offer_year_calendar_id\n\n            join base_learningunitenrollment on base_learningunitenrollment.id = base_examenrollment.learning_unit_enrollment_id\n            join base_offerenrollment on base_offerenrollment.id = base_learningunitenrollment.offer_enrollment_id\n            join base_offeryear on base_offeryear.id = base_offerenrollment.offer_year_id\n\n            join base_programmanager on base_programmanager.offer_year_id = base_offeryear.id\n            join base_person program_manager_person on program_manager_person.id = base_programmanager.person_id\n\n            where base_offeryearcalendar.start_date <= CURRENT_TIMESTAMP::date\n            and base_offeryearcalendar.end_date >=  CURRENT_TIMESTAMP::date\n\n            group by\n            base_programmanager.id,\n            program_manager_person.id,\n            base_offeryear.id,\n            base_learningunityear.id\n            ;\n            ',
        ),
        migrations.AddField(
            model_name='messagehistory',
            name='read_by_user',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='messagehistory',
            name='show_to_user',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterModelOptions(
            name='academiccalendar',
            options={'permissions': (('can_access_academic_calendar', 'Can access academic calendar'),)},
        ),
        migrations.AlterModelOptions(
            name='academicyear',
            options={'permissions': (('can_access_academicyear', 'Can access academic year'),)},
        ),
        migrations.AlterModelOptions(
            name='learningunit',
            options={'permissions': (('can_access_learningunit', 'Can access learning unit'),)},
        ),
        migrations.AlterModelOptions(
            name='offer',
            options={'permissions': (('can_access_offer', 'Can access offer'), ('can_access_catalog', 'Can access catalog'))},
        ),
        migrations.AlterModelOptions(
            name='offerenrollment',
            options={'permissions': (('can_access_student_path', 'Can access student path'), ('can_access_evaluation', 'Can access evaluation'))},
        ),
        migrations.AlterModelOptions(
            name='organization',
            options={'permissions': (('can_access_organization', 'Can access organization'),)},
        ),
        migrations.AlterModelOptions(
            name='person',
            options={'permissions': (('is_administrator', 'Is administrator'), ('is_institution_administrator', 'Is institution administrator '))},
        ),
        migrations.AlterModelOptions(
            name='scoresencoding',
            options={'managed': False, 'permissions': (('can_access_scoreencoding', 'Can access scoreencoding'),)},
        ),
        migrations.AlterModelOptions(
            name='structure',
            options={'permissions': (('can_access_structure', 'Can access structure'),)},
        ),
    ]

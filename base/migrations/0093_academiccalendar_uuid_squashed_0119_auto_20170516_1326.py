# Generated by Django 2.2.5 on 2019-12-14 00:49

import uuid

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('base', '0093_academiccalendar_uuid'), ('base', '0094_academiccalendar_reference'), ('base', '0095_synchronization'), ('base', '0096_auto_20170120_1615'), ('base', '0097_learningunitcomponent_coefficient_repetition'), ('base', '0098_auto_20170306_0953'), ('base', '0099_auto_20170320_1114'), ('base', '0100_auto_20170331_1610'), ('base', '0101_auto_20170411_1331'), ('base', '0102_auto_20170418_1008'), ('base', '0103_auto_20170419_1030'), ('base', '0104_auto_20170421_1521'), ('base', '0105_auto_20170420_1433'), ('base', '0106_auto_20170428_1119'), ('base', '0107_learningunit_learning_container'), ('base', '0108_auto_20170428_1818'), ('base', '0109_sessionexam_offer_year'), ('base', '0110_learningunityear_structure'), ('base', '0111_offertype'), ('base', '0112_offeryear_offer_type'), ('base', '0113_entity_entityaddress_entitylink_entityversion'), ('base', '0114_auto_20170512_0859'), ('base', '0115_auto_20170508_1548'), ('base', '0116_auto_20170516_1000'), ('base', '0117_auto_20170516_0919'), ('base', '0118_auto_20170516_1153'), ('base', '0119_auto_20170516_1326')]

    dependencies = [
        ('base', '0092_populate_academiccalendar_uuid'),
    ]

    operations = [
        migrations.AlterField(
            model_name='academiccalendar',
            name='uuid',
            field=models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.CreateModel(
            name='Synchronization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='LearningClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='LearningClassYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(max_length=3)),
                ('learning_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningClass')),
            ],
            options={
                'permissions': (('can_access_learningclassyear', 'Can access learning class year'),),
            },
        ),
        migrations.CreateModel(
            name='LearningComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='LearningContainer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='LearningContainerYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('acronym', models.CharField(max_length=10)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.AcademicYear')),
                ('learning_container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningContainer')),
            ],
            options={
                'permissions': (('can_access_learningcontaineryear', 'Can access learning container year'),),
            },
        ),
        migrations.CreateModel(
            name='LearningUnitComponentClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('learning_unit_component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningUnitComponent')),
                ('learning_unit_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningClassYear')),
            ],
            options={
                'permissions': (('can_access_learningunitcomponentclass', 'Can access learning unit component class'),),
            },
        ),
        migrations.AddField(
            model_name='learningunityear',
            name='type',
            field=models.CharField(blank=True, db_index=True, max_length=3, null=True),
        ),
        migrations.CreateModel(
            name='LearningComponentYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('acronym', models.CharField(max_length=3)),
                ('type', models.CharField(max_length=20)),
                ('comment', models.CharField(max_length=255)),
                ('learning_component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningComponent')),
                ('learning_container_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningContainerYear')),
            ],
            options={
                'permissions': (('can_access_learningunitcomponentyear', 'Can access learning unit component year'),),
            },
        ),
        migrations.AddField(
            model_name='learningcomponent',
            name='learning_container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningContainer'),
        ),
        migrations.AddField(
            model_name='learningclassyear',
            name='learning_component_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningComponentYear'),
        ),
        migrations.AddField(
            model_name='learningclass',
            name='learning_component',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.LearningComponent'),
        ),
        migrations.AddField(
            model_name='learningunitcomponent',
            name='learning_component_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.LearningComponentYear'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='learningunityear',
            name='learning_container_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.LearningContainerYear'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='learningunitcomponent',
            name='coefficient_repetition',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='learningunit',
            name='periodicity',
            field=models.CharField(blank=True, choices=[('ANNUAL', 'ANNUAL'), ('BIENNIAL_EVEN', 'BIENNIAL_EVEN'), ('BIENNIAL_ODD', 'BIENNIAL_ODD')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='score_draft',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)]),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='score_final',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)]),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='score_reencoded',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)]),
        ),
        migrations.CreateModel(
            name='SessionExamDeadline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(null=True)),
                ('deadline', models.DateField()),
                ('deadline_tutor', models.IntegerField(null=True)),
                ('number_session', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3)])),
                ('offer_enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.OfferEnrollment')),
            ],
        ),
        migrations.RemoveField(
            model_name='sessionexam',
            name='deadline',
        ),
        migrations.RemoveField(
            model_name='sessionexam',
            name='offer_year_calendar',
        ),
        migrations.AddField(
            model_name='academiccalendar',
            name='reference',
            field=models.CharField(blank=True, choices=[('DELIBERATION', 'DELIBERATION'), ('SCORES_EXAM_SUBMISSION', 'SCORES_EXAM_SUBMISSION')], max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='sessionexam',
            name='number_session',
            field=models.IntegerField(choices=[(1, 1), (2, 2), (3, 3)]),
        ),
        migrations.CreateModel(
            name='SessionExamCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, max_length=100, null=True)),
                ('changed', models.DateTimeField(null=True)),
                ('number_session', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3)])),
                ('academic_calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.AcademicCalendar')),
            ],
            options={
                'unique_together': {('number_session', 'academic_calendar')},
            },
        ),
        migrations.RunSQL(
            sql='\n            CREATE OR REPLACE VIEW app_scores_encoding AS\n            SELECT row_number() OVER () as id,\n\n                base_programmanager.id as program_manager_id,\n                program_manager_person.id as pgm_manager_person_id,\n                base_offeryear.id as offer_year_id,\n                base_learningunityear.id as learning_unit_year_id,\n                base_examenrollment.enrollment_state,\n\n                count(base_examenrollment.id) as total_exam_enrollments,\n                sum(case when base_examenrollment.score_final is not null\n                              or base_examenrollment.justification_final is not null\n                         then 1 else 0 end) exam_enrollments_encoded,\n                sum(case when (base_examenrollment.score_draft is not null\n                               and base_examenrollment.score_final is null\n                               and base_examenrollment.justification_final is null)\n                              or (base_examenrollment.justification_draft is not null\n                                  and base_examenrollment.score_final is null\n                                  and base_examenrollment.justification_final is null)\n                         then 1 else 0 end) scores_not_yet_submitted\n\n            from base_examenrollment\n            join base_sessionexam on base_sessionexam.id = base_examenrollment.session_exam_id\n            join base_learningunityear on base_learningunityear.id = base_sessionexam.learning_unit_year_id\n\n            join base_learningunitenrollment on base_learningunitenrollment.id = base_examenrollment.learning_unit_enrollment_id\n            join base_offerenrollment on base_offerenrollment.id = base_learningunitenrollment.offer_enrollment_id\n            join base_offeryear on base_offeryear.id = base_offerenrollment.offer_year_id\n\n            join base_programmanager on base_programmanager.offer_year_id = base_offeryear.id\n            join base_person program_manager_person on program_manager_person.id = base_programmanager.person_id\n\n            group by\n            base_programmanager.id,\n            program_manager_person.id,\n            base_offeryear.id,\n            base_learningunityear.id,\n            base_examenrollment.enrollment_state\n            ;\n            ',
        ),
        migrations.AlterField(
            model_name='academiccalendar',
            name='reference',
            field=models.CharField(blank=True, choices=[('DELIBERATION', 'DELIBERATION'), ('DISSERTATION_SUBMISSION', 'DISSERTATION_SUBMISSION'), ('EXAM_ENROLLMENTS', 'EXAM_ENROLLMENTS'), ('SCORES_EXAM_DIFFUSION', 'SCORES_EXAM_DIFFUSION'), ('SCORES_EXAM_SUBMISSION', 'SCORES_EXAM_SUBMISSION'), ('TEACHING_CHARGE_APPLICATION', 'TEACHING_CHARGE_APPLICATION')], max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_draft',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'ABSENCE_UNJUSTIFIED'), ('ABSENCE_JUSTIFIED', 'ABSENCE_JUSTIFIED'), ('CHEATING', 'CHEATING')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_final',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'ABSENCE_UNJUSTIFIED'), ('ABSENCE_JUSTIFIED', 'ABSENCE_JUSTIFIED'), ('CHEATING', 'CHEATING')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='justification_reencoded',
            field=models.CharField(blank=True, choices=[('ABSENCE_UNJUSTIFIED', 'ABSENCE_UNJUSTIFIED'), ('ABSENCE_JUSTIFIED', 'ABSENCE_JUSTIFIED'), ('CHEATING', 'CHEATING')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='examenrollmenthistory',
            name='justification_final',
            field=models.CharField(choices=[('ABSENCE_UNJUSTIFIED', 'ABSENCE_UNJUSTIFIED'), ('ABSENCE_JUSTIFIED', 'ABSENCE_JUSTIFIED'), ('CHEATING', 'CHEATING')], max_length=20, null=True),
        ),
        migrations.RunSQL(
            sql='\n            CREATE OR REPLACE VIEW app_scores_encoding AS\n            SELECT row_number() OVER () as id,\n\n                base_programmanager.id as program_manager_id,\n                program_manager_person.id as pgm_manager_person_id,\n                base_offeryear.id as offer_year_id,\n                base_learningunityear.id as learning_unit_year_id,\n\n                base_examenrollment.enrollment_state,\n                count(base_examenrollment.id) as total_exam_enrollments,\n                sum(case when base_examenrollment.score_final is not null\n                              or base_examenrollment.justification_final is not null\n                         then 1 else 0 end) exam_enrollments_encoded,\n                sum(case when (base_examenrollment.score_draft is not null\n                               and base_examenrollment.score_final is null\n                               and base_examenrollment.justification_final is null)\n                              or (base_examenrollment.justification_draft is not null\n                                  and base_examenrollment.score_final is null\n                                  and base_examenrollment.justification_final is null)\n                         then 1 else 0 end) scores_not_yet_submitted,\n                base_sessionexam.id as session_exam_id\n\n            from base_examenrollment\n            join base_sessionexam on base_sessionexam.id = base_examenrollment.session_exam_id\n            join base_learningunityear on base_learningunityear.id = base_sessionexam.learning_unit_year_id\n\n            join base_learningunitenrollment on base_learningunitenrollment.id = base_examenrollment.learning_unit_enrollment_id\n            join base_offerenrollment on base_offerenrollment.id = base_learningunitenrollment.offer_enrollment_id\n            join base_offeryear on base_offeryear.id = base_offerenrollment.offer_year_id\n\n            join base_programmanager on base_programmanager.offer_year_id = base_offeryear.id\n            join base_person program_manager_person on program_manager_person.id = base_programmanager.person_id\n\n            group by\n            base_programmanager.id,\n            program_manager_person.id,\n            base_offeryear.id,\n            base_learningunityear.id,\n            base_sessionexam.id,\n            base_examenrollment.enrollment_state;\n            ',
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='score_draft',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0, message='scores_must_be_between_0_and_20'), django.core.validators.MaxValueValidator(20, message='scores_must_be_between_0_and_20')]),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='score_final',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0, message='scores_must_be_between_0_and_20'), django.core.validators.MaxValueValidator(20, message='scores_must_be_between_0_and_20')]),
        ),
        migrations.AlterField(
            model_name='examenrollment',
            name='score_reencoded',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0, message='scores_must_be_between_0_and_20'), django.core.validators.MaxValueValidator(20, message='scores_must_be_between_0_and_20')]),
        ),
        migrations.AlterField(
            model_name='sessionexamdeadline',
            name='deadline_tutor',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql='\n            DROP VIEW IF EXISTS app_scores_encoding;\n            ',
        ),
        migrations.AlterField(
            model_name='person',
            name='global_id',
            field=models.CharField(blank=True, db_index=True, max_length=10, null=True),
        ),
        migrations.AlterField(
            model_name='student',
            name='registration_id',
            field=models.CharField(db_index=True, max_length=10, unique=True),
        ),
        migrations.AddField(
            model_name='learningunit',
            name='learning_container',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.LearningContainer'),
        ),
        migrations.AddField(
            model_name='person',
            name='employee',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='EntityManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Person')),
                ('structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Structure')),
            ],
            options={
                'permissions': (('is_entity_manager', 'Is entity manager '),),
            },
        ),
        migrations.AddField(
            model_name='sessionexam',
            name='offer_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.OfferYear'),
        ),
        migrations.AddField(
            model_name='learningunityear',
            name='structure',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.Structure'),
        ),
        migrations.CreateModel(
            name='OfferType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='offeryear',
            name='offer_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.OfferType'),
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.Organization')),
            ],
            options={
                'verbose_name_plural': 'entities',
            },
        ),
        migrations.CreateModel(
            name='EntityLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(db_index=True)),
                ('end_date', models.DateField(db_index=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child', to='base.Entity')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='base.Entity')),
            ],
        ),
        migrations.CreateModel(
            name='EntityVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('acronym', models.CharField(max_length=20)),
                ('entity_type', models.CharField(choices=[('SECTOR', 'SECTOR'), ('FACULTY', 'FACULTY'), ('SCHOOL', 'SCHOOL'), ('INSTITUTE', 'INSTITUTE'), ('POLE', 'POLE'), ('DOCTORAL_COMMISSION', 'DOCTORAL_COMMISSION'), ('PLATFORM', 'PLATFORM'), ('LOGISTICS_ENTITY', 'LOGISTICS_ENTITY'), ('UNDEFINED', 'UNDEFINED')], db_index=True, max_length=50)),
                ('start_date', models.DateField(db_index=True)),
                ('end_date', models.DateField(db_index=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Entity')),
            ],
        ),
        migrations.RemoveField(
            model_name='learningunitcomponent',
            name='coefficient_repetition',
        ),
        migrations.AddField(
            model_name='learningcomponentyear',
            name='planned_classes',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RemoveField(
            model_name='learningunityear',
            name='type',
        ),
        migrations.AddField(
            model_name='learningunityear',
            name='subtype',
            field=models.CharField(blank=True, choices=[('MASTER_DISSERTATION', 'MASTER_DISSERTATION'), ('FULL', 'FULL'), ('MOBILITY', 'MOBILITY'), ('OTHER', 'OTHER'), ('PARTIM', 'PARTIM'), ('PHD_THESIS', 'PHD_THESIS')], max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='learningunityear',
            name='activity_status',
            field=models.CharField(blank=True, choices=[('ACTIVE', 'ACTIVE'), ('PASSIVE', 'PASSIVE'), ('INACTIVE', 'INACTIVE')], max_length=20, null=True),
        ),
        migrations.RemoveField(
            model_name='learningcontainer',
            name='title',
        ),
        migrations.AddField(
            model_name='learningcontainer',
            name='changed',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='learningcontainer',
            name='external_id',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='learningcontaineryear',
            name='changed',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='learningcontaineryear',
            name='external_id',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='learningcontaineryear',
            name='container_type',
            field=models.CharField(blank=True, choices=[('COURSE', 'COURSE'), ('DISSERTATION', 'DISSERTATION'), ('INTERNSHIP', 'INTERNSHIP')], max_length=20, null=True),
        ),
        migrations.CreateModel(
            name='EntityAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=20, null=True)),
                ('location', models.CharField(max_length=255, null=True)),
                ('postal_code', models.CharField(max_length=20, null=True)),
                ('city', models.CharField(max_length=255, null=True)),
                ('country', models.CharField(max_length=255, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Entity')),
            ],
            options={
                'verbose_name_plural': 'entity addresses',
            },
        ),
        migrations.AddField(
            model_name='learningcomponent',
            name='description',
            field=models.CharField(blank=True, choices=[('LECTURING_COMPLETE', 'LECTURING_COMPLETE'), ('LECTURING_INCOMPLETE', 'LECTURING_INCOMPLETE'), ('PRACTICAL_EXERCISES_COMPLETE', 'PRACTICAL_EXERCISES_COMPLETE'), ('PRACTICAL_EXERCISES_INCOMPLETE', 'PRACTICAL_EXERCISES_INCOMPLETE')], max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='learningcomponent',
            name='type',
            field=models.CharField(blank=True, choices=[('LECTURING', 'LECTURING'), ('STAGE', 'STAGE'), ('DISSERTATION', 'DISSERTATION'), ('PRACTICAL_EXERCISES', 'PRACTICAL_EXERCISES')], max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='learningcomponentyear',
            name='hourly_volume_Q1',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True),
        ),
        migrations.AddField(
            model_name='learningcomponentyear',
            name='hourly_volume_total',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True),
        ),
        migrations.AddField(
            model_name='learningcomponent',
            name='external_id',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='learningcomponentyear',
            name='external_id',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='learningcomponent',
            name='acronym',
            field=models.CharField(max_length=3),
        ),
        migrations.AlterField(
            model_name='learningcomponentyear',
            name='acronym',
            field=models.CharField(blank=True, max_length=3, null=True),
        ),
        migrations.AlterField(
            model_name='learningcomponentyear',
            name='comment',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='learningcomponentyear',
            name='title',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='learningcomponentyear',
            name='type',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
    ]
